package net.ccbluex.liquidbounce.features.module.modules.exploit;

import net.ccbluex.liquidbounce.LiquidBounce;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.MoveEvent;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.Notification;
import net.ccbluex.liquidbounce.utils.BypassUtil;
import net.ccbluex.liquidbounce.utils.MovementUtils;
import net.ccbluex.liquidbounce.value.ListValue;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.Locale;

@ModuleInfo(name = "Disabler", description = "Disables some anticheats checks.", category = ModuleCategory.EXPLOIT)
public class Disabler extends Module {

    public ListValue mode = new ListValue("Mode", new String[]{ "Watchdog", "Transaction-Cancel", "Transaction-Spam", "Input-Cancel", "OnlyMC", "Verus", "WatchdogFull" }, "Watchdog");

    public ArrayList<C03PacketPlayer> packets = new ArrayList<>();
    @Override
    public void onEnable() {
        if (mode.get().equalsIgnoreCase("Input-Cancel")){
            LiquidBounce.hud.addNotification(new Notification("Disabled AAC"));
        }
    }

    @Override
    public void onDisable() {

    }

    @EventTarget
    public void onUpdate(UpdateEvent event){

        if (mode.get().equalsIgnoreCase("Transaction-Spam")){
            mc.thePlayer.sendQueue.addToSendQueue(new C0FPacketConfirmTransaction((int) BypassUtil.range(9E-8D, 11.13E-3D),(short) BypassUtil.range(13.1E-7D, 14.0E-12D),true));
        }
        if (mode.get().equalsIgnoreCase("verus")){

        }
    }

    @EventTarget
    public void onPacket(PacketEvent event){
            if (mode.get().equalsIgnoreCase("Watchdog")){
            if (event.getPacket() instanceof C0FPacketConfirmTransaction){
                C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction) event.getPacket();
                int id = (int) (BypassUtil.range(3.0E-7D, 30.0E-10D));
                mc.getNetHandler().getNetworkManager().sendPacket(new C0FPacketConfirmTransaction(id, (short) 1, false));
                event.cancelEvent();
            }
        }

            if (mode.get().equalsIgnoreCase("Transaction-Cancel")){
                if (event.getPacket() instanceof C0FPacketConfirmTransaction){
                    event.cancelEvent();
                }
            }

            if (mode.get().equalsIgnoreCase("Input-Cancel")){
                if (event.getPacket() instanceof C0CPacketInput){
                    event.cancelEvent();
                }
            }

            if (mode.get().equalsIgnoreCase("OnlyMC")){
                if (event.getPacket() instanceof S08PacketPlayerPosLook){
                    S08PacketPlayerPosLook playerPosLook = (S08PacketPlayerPosLook) event.getPacket();
                    playerPosLook.yaw = (float) BypassUtil.range(12.3E-90, 15.2E-7D);
                }
            }

            if (mode.get().equalsIgnoreCase("verus")){
                if (event.getPacket() instanceof C03PacketPlayer){
                    C03PacketPlayer packet = (C03PacketPlayer) event.getPacket();
                }
            }

            if (mode.get().equalsIgnoreCase("watchdogfull")){
                mc.thePlayer.setPosition(mc.thePlayer.posX,mc.thePlayer.posY + -1.1274936900641403E-10,mc.thePlayer.posZ);
                MovementUtils.strafe(1.0f);
                if (!MovementUtils.isMoving()){
                    mc.thePlayer.motionX = 0;

                }
                if (mc.thePlayer.movementInput.jump) {
                    mc.thePlayer.motionY = 1.0 * 0.6;
                } else if (mc.thePlayer.movementInput.sneak) {
                    mc.thePlayer.motionY = -1.0 * 0.6;
                } else {
                    mc.thePlayer.motionY = 0;
                }
            }
    }

    @EventTarget
    public void onMove(MoveEvent event){
        if (mode.get().equalsIgnoreCase("OnlyMC")){
            double y = 0 - mc.thePlayer.motionX;
            double x = 0 - mc.thePlayer.motionY;
            double z = 0 - mc.thePlayer.motionZ;

            y += 15.2E-7D;
            z += 12.3E-90D;
            x += 86.13E-60D;
            event.setY(y);
            event.setX(x);
            event.setZ(z);
            mc.thePlayer.posY = y;
            mc.thePlayer.posZ = z;
            mc.thePlayer.posX = x;
        }
    }

    @Nullable
    @Override
    public String getTag() {
        return mode.get();
    }
}
