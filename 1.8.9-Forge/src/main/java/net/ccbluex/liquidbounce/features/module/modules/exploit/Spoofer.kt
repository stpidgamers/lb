package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.ChatUtil
import net.ccbluex.liquidbounce.utils.MinecraftInstance
import net.minecraft.network.handshake.client.C00Handshake
import net.minecraft.network.login.client.C00PacketLoginStart
import net.minecraft.network.login.client.C01PacketEncryptionResponse
import net.minecraft.network.play.client.*
import net.minecraft.network.play.server.*
import net.minecraft.network.status.client.C00PacketServerQuery
import net.minecraft.network.status.client.C01PacketPing
import net.minecraft.network.status.server.S01PacketPong

@ModuleInfo(name = "Spoofer", description = "spoof yes", category = ModuleCategory.EXPLOIT)
class Spoofer : Module() {

    private val VERUS_DISABLE_AUTOBAN_CHANNEL = 65536
    private val VERUS_DISABLE_AUTOBAN_UID: Short = 32767

    @EventTarget
    fun onPacket(event: PacketEvent){
        if (event.packet is C03PacketPlayer) {
            val c03 = event.packet as C03PacketPlayer
            if (mc.thePlayer.ticksExisted % 33 == 0) {
                //c03.y = -0.911
                c03.onGround = false
                c03.isMoving = false
            }
        }

        if (event.packet is S08PacketPlayerPosLook){
           // event.packet.yaw += 1.0E-4f
        }
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent){
        mc.thePlayer.posY = 1.5E-9
        mc.thePlayer.posY -= 7.8E-1
        mc.thePlayer.posY = 4.5E-90
        mc.thePlayer.posY = 10.10E-2
        mc.thePlayer.sendQueue.addToSendQueue(C0FPacketConfirmTransaction(VERUS_DISABLE_AUTOBAN_CHANNEL, VERUS_DISABLE_AUTOBAN_UID, true))
        //mc.thePlayer.sendQueue.addToSendQueue(C01PacketPing())
        //mc.thePlayer.sendQueue.addToSendQueue(C00PacketServerQuery())
        //mc.thePlayer.sendQueue.addToSendQueue(S00PacketKeepAlive(VERUS_DISABLE_AUTOBAN_CHANNEL - VERUS_DISABLE_AUTOBAN_UID))
        mc.thePlayer.sendQueue.addToSendQueue(C0CPacketInput())
        mc.thePlayer.sendQueue.addToSendQueue(C0APacketAnimation())
        mc.thePlayer.sendQueue.addToSendQueue(C0EPacketClickWindow())
        mc.thePlayer.sendQueue.addToSendQueue(C09PacketHeldItemChange(9 - 1))
        mc.thePlayer.sendQueue.addToSendQueue(C0DPacketCloseWindow())
        mc.thePlayer.sendQueue.addToSendQueue(C0FPacketConfirmTransaction(
            Float.MAX_VALUE.toInt(),
            Float.MIN_VALUE.toShort(), true))
      //  mc.thePlayer.sendQueue.addToSendQueue(S0CPacketSpawnPlayer(mc.thePlayer))
     //   mc.thePlayer.sendQueue.addToSendQueue(C10PacketCreativeInventoryAction())
     //  mc.thePlayer.sendQueue.addToSendQueue(S01PacketPong(1.4E-3.toLong()))
        //mc.thePlayer.sendQueue.addToSendQueue(S00PacketKeepAlive())
     //  mc.thePlayer.sendQueue.addToSendQueue(S07PacketRespawn())
      //  mc.thePlayer.sendQueue.addToSendQueue(S0APacketUseBed())
        //mc.thePlayer.sendQueue.addToSendQueue(C00Handshake())
       // mc.thePlayer.sendQueue.addToSendQueue(S32PacketConfirmTransaction(1,1,true))
        //mc.thePlayer.sendQueue.addToSendQueue(C00PacketLoginStart())
     //   mc.thePlayer.sendQueue.addToSendQueue(C01PacketEncryptionResponse())
      //  mc.thePlayer.motionY = 10.10E-1
      //  mc.thePlayer.motionY -= 10.10E-1
        mc.version
    }

    override fun onEnable() {
        ChatUtil.printChat("Disabled Verus")
    }

    override val tag: String?
        get() = "G8"
}